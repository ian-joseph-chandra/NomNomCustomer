{"version":3,"sources":["webpack:///./src/app/generate-qr/generate-qr.module.ts","webpack:///./src/app/generate-qr/generate-qr.page.html","webpack:///./src/app/generate-qr/generate-qr.page.scss","webpack:///./src/app/generate-qr/generate-qr.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AACF;AAED;AAEa;AACF;AACN;AAEU;AAEnE,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gEAAc;KAC1B;CACF,CAAC;AAiBF;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAhBhC,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAChC;YACD,YAAY,EAAE,CAAC,gEAAc,CAAC;YAC9B,SAAS,EAAE;gBACP,sEAAS;gBACT,4EAAY;gBACZ,gFAAc;gBACd,EAAE,OAAO,EAAE,kEAAkB,EAAE,QAAQ,EAAE,iEAAkB,EAAE;aAChE;YACD,SAAS,EAAE,CAAC,gEAAc,CAAC;SAC9B,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;ACpCjC,gtBAAgtB,kBAAkB,8D;;;;;;;;;;;ACAluB,+DAA+D,mJ;;;;;;;;;;;;;;;;;;;;;ACAb;AAER;AACqB;AACN;AAEiC;AAO1F;IAOI,wBACY,QAAkB,EAClB,YAA0B,EAC1B,SAAoB,EACpB,OAAuB;QAHvB,aAAQ,GAAR,QAAQ,CAAU;QAClB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,cAAS,GAAT,SAAS,CAAW;QACpB,YAAO,GAAP,OAAO,CAAgB;QARnC,cAAS,GAAW,EAAE,CAAC;QACvB,gBAAW,GAAQ,EAAE,CAAC;QACtB,gBAAW,GAAQ,EAAE,CAAC;IAQtB,CAAC;IAED,iCAAQ,GAAR;IACA,CAAC;IAED,6BAAI,GAAJ;QAAA,iBAUC;QATG,IAAI,CAAC,OAAO,GAAG;YACX,MAAM,EAAE,mBAAmB;SAC9B,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YACtC,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,EAAE,UAAC,GAAG;YACJ,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAChC,CAAC;IACL,CAAC;IAED,+BAAM,GAAN;QAAA,iBAMC;QALG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YACzE,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,CAAC,EAAE,UAAC,GAAG;YACH,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAChC,CAAC,CAAC;IACN,CAAC;IApCQ,cAAc;QAL1B,+DAAS,CAAC;YACP,QAAQ,EAAE,iBAAiB;YAC3B,2GAAsC;;SAEzC,CAAC;+EASwB,uDAAQ;YACJ,4EAAY;YACf,sEAAS;YACX,gFAAc;OAX1B,cAAc,CAqC1B;IAAD,qBAAC;CAAA;AArC0B","file":"generate-qr-generate-qr-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RouteReuseStrategy } from '@angular/router';\r\n\r\nimport { GenerateQrPage } from './generate-qr.page';\r\n\r\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\nimport { BarcodeScanner } from '@ionic-native/barcode-scanner/ngx';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: GenerateQrPage\r\n  }\r\n];\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    declarations: [GenerateQrPage],\r\n    providers: [\r\n        StatusBar,\r\n        SplashScreen,\r\n        BarcodeScanner,\r\n        { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\r\n    ],\r\n    bootstrap: [GenerateQrPage]\r\n})\r\nexport class GenerateQrPageModule {}\r\n","module.exports = \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n  \\t<ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button autoHide=\\\"false\\\"></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>Generate QR Code</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content padding>\\r\\n    <div>\\r\\n        <ion-input style=\\\"background-color: gray\\\" type=\\\"text\\\" [(ngModel)]=\\\"encodText\\\"></ion-input>\\r\\n\\r\\n        <ion-button block (click)=\\\"encode()\\\"> Encode</ion-button>\\r\\n\\r\\n    </div>\\r\\n    <div>\\r\\n\\r\\n        <ion-button block (click)=\\\"scan()\\\"> Scan</ion-button>\\r\\n\\r\\n        <div *ngIf=\\\"scannedData.text\\\">\\r\\n            <label>Your Barcode is</label>\\r\\n            <br>\\r\\n            <span>{{scannedData.text}}</span>\\r\\n        </div>\\r\\n    </div>\\r\\n</ion-content>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2dlbmVyYXRlLXFyL2dlbmVyYXRlLXFyLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Platform } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\nimport { BarcodeScanner, BarcodeScannerOptions } from '@ionic-native/barcode-scanner/ngx';\r\n\r\n@Component({\r\n    selector: 'app-generate-qr',\r\n    templateUrl: './generate-qr.page.html',\r\n    styleUrls: ['./generate-qr.page.scss'],\r\n})\r\nexport class GenerateQrPage implements OnInit {\r\n\r\n    options: BarcodeScannerOptions;\r\n    encodText: string = '';\r\n    encodedData: any = {};\r\n    scannedData: any = {};\r\n\r\n    constructor(\r\n        private platform: Platform,\r\n        private splashScreen: SplashScreen,\r\n        private statusBar: StatusBar,\r\n        private scanner: BarcodeScanner\r\n    ) { \r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    scan() {\r\n        this.options = {\r\n            prompt: 'Scan your barcode'\r\n        };\r\n\r\n        this.scanner.scan(this.options).then((data) => {\r\n            this.scannedData = data;\r\n        }), (err) => {\r\n            console.log('Error: ', err);\r\n        }\r\n    }\r\n\r\n    encode() {\r\n        this.scanner.encode(this.scanner.Encode.TEXT_TYPE, this.encodText).then((data) => {\r\n            this.encodedData = data;\r\n        }, (err) => {\r\n            console.log('Error: ', err);\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}